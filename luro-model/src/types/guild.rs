use serde::{Deserialize, Serialize};
use twilight_model::{
    channel::{message::Sticker, StageInstance},
    gateway::presence::Presence,
    guild::{
        AfkTimeout, DefaultMessageNotificationLevel, Emoji, ExplicitContentFilter, GuildFeature, Member, MfaLevel, NSFWLevel,
        Permissions, PremiumTier, SystemChannelFlags, VerificationLevel,
    },
    id::{
        marker::{ApplicationMarker, ChannelMarker, GuildMarker, UserMarker},
        Id,
    },
    util::{ImageHash, Timestamp},
    voice::VoiceState,
};

use super::{Channel, GuildData, Role};

mod is_owner;
mod accent_colour;

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Guild {
    pub data: Option<GuildData>,
    pub afk_channel_id: Option<Id<ChannelMarker>>,
    pub afk_timeout: AfkTimeout,
    pub application_id: Option<Id<ApplicationMarker>>,
    pub approximate_member_count: Option<u64>,
    pub approximate_presence_count: Option<u64>,
    pub banner: Option<ImageHash>,
    pub channels: Vec<Channel>,
    pub default_message_notifications: DefaultMessageNotificationLevel,
    pub description: Option<String>,
    pub discovery_splash: Option<ImageHash>,
    pub emojis: Vec<Emoji>,
    pub explicit_content_filter: ExplicitContentFilter,
    pub features: Vec<GuildFeature>,
    pub guild_id: Id<GuildMarker>,
    pub icon: Option<ImageHash>,
    #[serde(skip)]
    pub joined_at: Option<Timestamp>,
    pub large: bool,
    pub max_members: Option<u64>,
    pub max_presences: Option<u64>,
    pub roles: Vec<Role>,
    pub max_video_channel_users: Option<u64>,
    pub member_count: Option<u64>,
    pub members: Vec<Member>,
    pub mfa_level: MfaLevel,
    pub name: String,
    pub nsfw_level: NSFWLevel,
    pub owner_id: Id<UserMarker>,
    pub owner: Option<bool>,
    pub permissions: Option<Permissions>,
    pub preferred_locale: String,
    pub premium_progress_bar_enabled: bool,
    pub premium_subscription_count: Option<u64>,
    pub premium_tier: PremiumTier,
    pub presences: Vec<Presence>,
    pub public_updates_channel_id: Option<Id<ChannelMarker>>,
    pub rules_channel_id: Option<Id<ChannelMarker>>,
    pub safety_alerts_channel_id: Option<Id<ChannelMarker>>,
    pub splash: Option<ImageHash>,
    pub stage_instances: Vec<StageInstance>,
    pub stickers: Vec<Sticker>,
    pub system_channel_flags: SystemChannelFlags,
    pub system_channel_id: Option<Id<ChannelMarker>>,
    pub threads: Vec<Channel>,
    pub unavailable: bool,
    pub vanity_url_code: Option<String>,
    pub verification_level: VerificationLevel,
    pub voice_states: Vec<VoiceState>,
    pub widget_channel_id: Option<Id<ChannelMarker>>,
    pub widget_enabled: Option<bool>,
}

impl From<Guild> for twilight_model::guild::Guild {
    fn from(guild: Guild) -> Self {
        Self {
            afk_channel_id: guild.afk_channel_id,
            afk_timeout: guild.afk_timeout,
            application_id: guild.application_id,
            approximate_member_count: guild.approximate_member_count,
            approximate_presence_count: guild.approximate_presence_count,
            banner: guild.banner,
            channels: guild.channels.clone().into_iter().map(|x| x.into()).collect(),
            default_message_notifications: guild.default_message_notifications,
            description: guild.description,
            discovery_splash: guild.discovery_splash,
            emojis: guild.emojis,
            explicit_content_filter: guild.explicit_content_filter,
            features: guild.features,
            icon: guild.icon,
            id: guild.guild_id,
            joined_at: guild.joined_at,
            large: guild.large,
            max_members: guild.max_members,
            max_presences: guild.max_presences,
            max_video_channel_users: guild.max_video_channel_users,
            member_count: guild.member_count,
            members: guild.members,
            mfa_level: guild.mfa_level,
            name: guild.name,
            nsfw_level: guild.nsfw_level,
            owner_id: guild.owner_id,
            owner: guild.owner,
            permissions: guild.permissions,
            preferred_locale: guild.preferred_locale,
            premium_progress_bar_enabled: guild.premium_progress_bar_enabled,
            premium_subscription_count: guild.premium_subscription_count,
            premium_tier: guild.premium_tier,
            presences: guild.presences,
            public_updates_channel_id: guild.public_updates_channel_id,
            roles: guild.roles.clone().into_iter().map(|x| x.into()).collect(),
            rules_channel_id: guild.rules_channel_id,
            safety_alerts_channel_id: guild.safety_alerts_channel_id,
            splash: guild.splash,
            stage_instances: guild.stage_instances,
            stickers: guild.stickers,
            system_channel_flags: guild.system_channel_flags,
            system_channel_id: guild.system_channel_id,
            threads: guild.threads.into_iter().map(|x| x.into()).collect(),
            unavailable: guild.unavailable,
            vanity_url_code: guild.vanity_url_code,
            verification_level: guild.verification_level,
            voice_states: guild.voice_states,
            widget_channel_id: guild.widget_channel_id,
            widget_enabled: guild.widget_enabled,
        }
    }
}

impl From<twilight_model::guild::Guild> for Guild {
    fn from(guild: twilight_model::guild::Guild) -> Self {
        Self {
            data: None,
            afk_channel_id: guild.afk_channel_id,
            afk_timeout: guild.afk_timeout,
            application_id: guild.application_id,
            approximate_member_count: guild.approximate_member_count,
            approximate_presence_count: guild.approximate_presence_count,
            banner: guild.banner,
            channels: guild.channels.clone().into_iter().map(|x| x.into()).collect(),
            default_message_notifications: guild.default_message_notifications,
            description: guild.description,
            discovery_splash: guild.discovery_splash,
            emojis: guild.emojis,
            explicit_content_filter: guild.explicit_content_filter,
            features: guild.features,
            icon: guild.icon,
            guild_id: guild.id,
            joined_at: guild.joined_at,
            large: guild.large,
            max_members: guild.max_members,
            max_presences: guild.max_presences,
            max_video_channel_users: guild.max_video_channel_users,
            member_count: guild.member_count,
            members: guild.members,
            mfa_level: guild.mfa_level,
            name: guild.name,
            nsfw_level: guild.nsfw_level,
            owner_id: guild.owner_id,
            owner: guild.owner,
            permissions: guild.permissions,
            preferred_locale: guild.preferred_locale,
            premium_progress_bar_enabled: guild.premium_progress_bar_enabled,
            premium_subscription_count: guild.premium_subscription_count,
            premium_tier: guild.premium_tier,
            presences: guild.presences,
            public_updates_channel_id: guild.public_updates_channel_id,
            roles: guild.roles.clone().into_iter().map(|x| (guild.id, x).into()).collect(),
            rules_channel_id: guild.rules_channel_id,
            safety_alerts_channel_id: guild.safety_alerts_channel_id,
            splash: guild.splash,
            stage_instances: guild.stage_instances,
            stickers: guild.stickers,
            system_channel_flags: guild.system_channel_flags,
            system_channel_id: guild.system_channel_id,
            threads: guild.threads.into_iter().map(|x| x.into()).collect(),
            unavailable: guild.unavailable,
            vanity_url_code: guild.vanity_url_code,
            verification_level: guild.verification_level,
            voice_states: guild.voice_states,
            widget_channel_id: guild.widget_channel_id,
            widget_enabled: guild.widget_enabled,
        }
    }
}
